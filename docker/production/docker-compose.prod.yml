# version: '3.8'

services:
  postgres:
    extends:
      file: ../../docker-compose.yml
      service: postgres
    restart: always
    # Don't expose port in production for security

  backend:
    build:
      context: ../../backend
      dockerfile: ../docker/production/backend.prod.dockerfile
      args:
        NODE_ENV: production
    container_name: audio_hosting_backend_prod
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: audiohosting
      DB_USER: postgres
      DB_PASSWORD: password
      JWT_SECRET: jwt-secret
      SESSION_SECRET: session-secret
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"  # Expose backend port
    volumes:
      - audio_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - audio_hosting_network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ../../frontend
      dockerfile: ../docker/production/frontend.prod.dockerfile
      args:
        REACT_APP_API_URL: http://localhost:5000/api
        REACT_APP_ENV: production
    container_name: audio_hosting_frontend_prod
    ports:
      - "3000:80"  # Map host port 3000 to container port 80
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - audio_hosting_network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: audio_hosting_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - audio_uploads:/var/www/uploads:ro
    depends_on:
      - frontend
      - backend
    networks:
      - audio_hosting_network
    restart: always
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  audio_uploads:

networks:
  audio_hosting_network:
    driver: bridge